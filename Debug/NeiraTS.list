
NeiraTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e34  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f54  08002f54  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002f54  08002f54  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f54  08002f54  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eac  20000008  08002f64  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  08002f64  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d5d  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027c6  00000000  00000000  00031d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00035150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036a7  00000000  00000000  00035c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb28  00000000  00000000  000392c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005241c  00000000  00000000  00044def  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009720b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028dc  00000000  00000000  00097288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002edc 	.word	0x08002edc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002edc 	.word	0x08002edc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b095      	sub	sp, #84	; 0x54
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	2420      	movs	r4, #32
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2330      	movs	r3, #48	; 0x30
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f002 fe4b 	bl	8002ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000236:	2310      	movs	r3, #16
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	0018      	movs	r0, r3
 800023c:	2310      	movs	r3, #16
 800023e:	001a      	movs	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f002 fe43 	bl	8002ecc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000246:	003b      	movs	r3, r7
 8000248:	0018      	movs	r0, r3
 800024a:	2310      	movs	r3, #16
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f002 fe3c 	bl	8002ecc <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	0021      	movs	r1, r4
 8000256:	187b      	adds	r3, r7, r1
 8000258:	2202      	movs	r2, #2
 800025a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	187b      	adds	r3, r7, r1
 800025e:	2201      	movs	r2, #1
 8000260:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	187b      	adds	r3, r7, r1
 8000264:	2210      	movs	r2, #16
 8000266:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	187b      	adds	r3, r7, r1
 800026a:	2202      	movs	r2, #2
 800026c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026e:	187b      	adds	r3, r7, r1
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	0212      	lsls	r2, r2, #8
 8000274:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	0352      	lsls	r2, r2, #13
 800027c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2200      	movs	r2, #0
 8000282:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	187b      	adds	r3, r7, r1
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fb96 	bl	80009b8 <HAL_RCC_OscConfig>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000290:	f002 fc70 	bl	8002b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	2110      	movs	r1, #16
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2202      	movs	r2, #2
 80002a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2101      	movs	r1, #1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fe78 	bl	8000fa8 <HAL_RCC_ClockConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002bc:	f002 fc5a 	bl	8002b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	003b      	movs	r3, r7
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 ffd8 	bl	8001284 <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002d8:	f002 fc4c 	bl	8002b74 <Error_Handler>
  }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b015      	add	sp, #84	; 0x54
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_SPI1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <MX_SPI1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_SPI1_Init+0x74>)
 80002f0:	2282      	movs	r2, #130	; 0x82
 80002f2:	0052      	lsls	r2, r2, #1
 80002f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_SPI1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002fc:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_SPI1_Init+0x74>)
 80002fe:	22c0      	movs	r2, #192	; 0xc0
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_SPI1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_SPI1_Init+0x74>)
 8000312:	2280      	movs	r2, #128	; 0x80
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_SPI1_Init+0x74>)
 800031a:	2210      	movs	r2, #16
 800031c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_SPI1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_SPI1_Init+0x74>)
 8000332:	2207      	movs	r2, #7
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_SPI1_Init+0x74>)
 800033e:	2208      	movs	r2, #8
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <MX_SPI1_Init+0x74>)
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f86b 	bl	8001420 <HAL_SPI_Init>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f002 fc11 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000e48 	.word	0x20000e48
 800035c:	40013000 	.word	0x40013000

08000360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <MX_USART1_UART_Init+0x5c>)
 8000368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 800036c:	22e1      	movs	r2, #225	; 0xe1
 800036e:	0252      	lsls	r2, r2, #9
 8000370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_USART1_UART_Init+0x58>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f8d5 	bl	8001554 <HAL_UART_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ae:	f002 fbe1 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

};
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000d68 	.word	0x20000d68
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART4_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_USART4_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003cc:	22e1      	movs	r2, #225	; 0xe1
 80003ce:	0252      	lsls	r2, r2, #9
 80003d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_USART4_UART_Init+0x58>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 f8a5 	bl	8001554 <HAL_UART_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f002 fbb1 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000dd8 	.word	0x20000dd8
 800041c:	40004c00 	.word	0x40004c00

08000420 <MX_GPIO_Init>:
  * @retval None
  */


void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	0018      	movs	r0, r3
 800042a:	2314      	movs	r3, #20
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f002 fd4c 	bl	8002ecc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_GPIO_Init+0x6c>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_GPIO_Init+0x6c>)
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	0289      	lsls	r1, r1, #10
 800043e:	430a      	orrs	r2, r1
 8000440:	615a      	str	r2, [r3, #20]
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_GPIO_Init+0x6c>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	029b      	lsls	r3, r3, #10
 800044a:	4013      	ands	r3, r2
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000450:	2390      	movs	r3, #144	; 0x90
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fa8f 	bl	800097c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2201      	movs	r2, #1
 8000462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2201      	movs	r2, #1
 8000468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	1d3a      	adds	r2, r7, #4
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f908 	bl	8000694 <HAL_GPIO_Init>

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b006      	add	sp, #24
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000

08000490 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f001 fb6e 	bl	8001b7a <osDelay>
 800049e:	e7fb      	b.n	8000498 <StartDefaultTask+0x8>

080004a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <HAL_Init+0x24>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_Init+0x24>)
 80004aa:	2110      	movs	r1, #16
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 f809 	bl	80004c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b6:	f002 fb63 	bl	8002b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80004d0:	f000 feb8 	bl	8001244 <HAL_RCC_GetHCLKFreq>
 80004d4:	0002      	movs	r2, r0
 80004d6:	23fa      	movs	r3, #250	; 0xfa
 80004d8:	0099      	lsls	r1, r3, #2
 80004da:	0010      	movs	r0, r2
 80004dc:	f7ff fe14 	bl	8000108 <__udivsi3>
 80004e0:	0003      	movs	r3, r0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f8c9 	bl	800067a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	425b      	negs	r3, r3
 80004ee:	2200      	movs	r2, #0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 f8ad 	bl	8000650 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	0018      	movs	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b002      	add	sp, #8
 80004fe:	bd80      	pop	{r7, pc}

08000500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  uwTick++;
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <HAL_IncTick+0x14>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	4b02      	ldr	r3, [pc, #8]	; (8000514 <HAL_IncTick+0x14>)
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000eb0 	.word	0x20000eb0

08000518 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  return uwTick;
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <HAL_GetTick+0x10>)
 800051e:	681b      	ldr	r3, [r3, #0]
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000eb0 	.word	0x20000eb0

0800052c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b7f      	cmp	r3, #127	; 0x7f
 8000540:	d932      	bls.n	80005a8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000542:	4a2f      	ldr	r2, [pc, #188]	; (8000600 <NVIC_SetPriority+0xd4>)
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	0019      	movs	r1, r3
 800054a:	230f      	movs	r3, #15
 800054c:	400b      	ands	r3, r1
 800054e:	3b08      	subs	r3, #8
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	3306      	adds	r3, #6
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	18d3      	adds	r3, r2, r3
 8000558:	3304      	adds	r3, #4
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1dfa      	adds	r2, r7, #7
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	0011      	movs	r1, r2
 8000562:	2203      	movs	r2, #3
 8000564:	400a      	ands	r2, r1
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	21ff      	movs	r1, #255	; 0xff
 800056a:	4091      	lsls	r1, r2
 800056c:	000a      	movs	r2, r1
 800056e:	43d2      	mvns	r2, r2
 8000570:	401a      	ands	r2, r3
 8000572:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	019b      	lsls	r3, r3, #6
 8000578:	22ff      	movs	r2, #255	; 0xff
 800057a:	401a      	ands	r2, r3
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	0018      	movs	r0, r3
 8000582:	2303      	movs	r3, #3
 8000584:	4003      	ands	r3, r0
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800058a:	481d      	ldr	r0, [pc, #116]	; (8000600 <NVIC_SetPriority+0xd4>)
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	001c      	movs	r4, r3
 8000592:	230f      	movs	r3, #15
 8000594:	4023      	ands	r3, r4
 8000596:	3b08      	subs	r3, #8
 8000598:	089b      	lsrs	r3, r3, #2
 800059a:	430a      	orrs	r2, r1
 800059c:	3306      	adds	r3, #6
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	18c3      	adds	r3, r0, r3
 80005a2:	3304      	adds	r3, #4
 80005a4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005a6:	e027      	b.n	80005f8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a8:	4a16      	ldr	r2, [pc, #88]	; (8000604 <NVIC_SetPriority+0xd8>)
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	33c0      	adds	r3, #192	; 0xc0
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	589b      	ldr	r3, [r3, r2]
 80005b8:	1dfa      	adds	r2, r7, #7
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	0011      	movs	r1, r2
 80005be:	2203      	movs	r2, #3
 80005c0:	400a      	ands	r2, r1
 80005c2:	00d2      	lsls	r2, r2, #3
 80005c4:	21ff      	movs	r1, #255	; 0xff
 80005c6:	4091      	lsls	r1, r2
 80005c8:	000a      	movs	r2, r1
 80005ca:	43d2      	mvns	r2, r2
 80005cc:	401a      	ands	r2, r3
 80005ce:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	019b      	lsls	r3, r3, #6
 80005d4:	22ff      	movs	r2, #255	; 0xff
 80005d6:	401a      	ands	r2, r3
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	0018      	movs	r0, r3
 80005de:	2303      	movs	r3, #3
 80005e0:	4003      	ands	r3, r0
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <NVIC_SetPriority+0xd8>)
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	33c0      	adds	r3, #192	; 0xc0
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	501a      	str	r2, [r3, r0]
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b003      	add	sp, #12
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	e000e100 	.word	0xe000e100

08000608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <SysTick_Config+0x40>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d901      	bls.n	800061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2301      	movs	r3, #1
 800061c:	e010      	b.n	8000640 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <SysTick_Config+0x44>)
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	3a01      	subs	r2, #1
 8000624:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000626:	2301      	movs	r3, #1
 8000628:	425b      	negs	r3, r3
 800062a:	2103      	movs	r1, #3
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff ff7d 	bl	800052c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <SysTick_Config+0x44>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <SysTick_Config+0x44>)
 800063a:	2207      	movs	r2, #7
 800063c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800063e:	2300      	movs	r3, #0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bd80      	pop	{r7, pc}
 8000648:	00ffffff 	.word	0x00ffffff
 800064c:	e000e010 	.word	0xe000e010

08000650 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	210f      	movs	r1, #15
 800065c:	187b      	adds	r3, r7, r1
 800065e:	1c02      	adds	r2, r0, #0
 8000660:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	187b      	adds	r3, r7, r1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff ff5d 	bl	800052c <NVIC_SetPriority>
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b004      	add	sp, #16
 8000678:	bd80      	pop	{r7, pc}

0800067a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ffbf 	bl	8000608 <SysTick_Config>
 800068a:	0003      	movs	r3, r0
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006aa:	e14f      	b.n	800094c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2101      	movs	r1, #1
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	4091      	lsls	r1, r2
 80006b6:	000a      	movs	r2, r1
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <HAL_GPIO_Init+0x30>
 80006c2:	e140      	b.n	8000946 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d003      	beq.n	80006d4 <HAL_GPIO_Init+0x40>
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b12      	cmp	r3, #18
 80006d2:	d123      	bne.n	800071c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	08da      	lsrs	r2, r3, #3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3208      	adds	r2, #8
 80006dc:	0092      	lsls	r2, r2, #2
 80006de:	58d3      	ldr	r3, [r2, r3]
 80006e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2207      	movs	r2, #7
 80006e6:	4013      	ands	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	220f      	movs	r2, #15
 80006ec:	409a      	lsls	r2, r3
 80006ee:	0013      	movs	r3, r2
 80006f0:	43da      	mvns	r2, r3
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	691a      	ldr	r2, [r3, #16]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2107      	movs	r1, #7
 8000700:	400b      	ands	r3, r1
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	409a      	lsls	r2, r3
 8000706:	0013      	movs	r3, r2
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	4313      	orrs	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	08da      	lsrs	r2, r3, #3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3208      	adds	r2, #8
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	6939      	ldr	r1, [r7, #16]
 800071a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	2203      	movs	r2, #3
 8000728:	409a      	lsls	r2, r3
 800072a:	0013      	movs	r3, r2
 800072c:	43da      	mvns	r2, r3
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4013      	ands	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2203      	movs	r2, #3
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	409a      	lsls	r2, r3
 8000742:	0013      	movs	r3, r2
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4313      	orrs	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d00b      	beq.n	8000770 <HAL_GPIO_Init+0xdc>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d007      	beq.n	8000770 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000764:	2b11      	cmp	r3, #17
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	2b12      	cmp	r3, #18
 800076e:	d130      	bne.n	80007d2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2203      	movs	r2, #3
 800077c:	409a      	lsls	r2, r3
 800077e:	0013      	movs	r3, r2
 8000780:	43da      	mvns	r2, r3
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	68da      	ldr	r2, [r3, #12]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	409a      	lsls	r2, r3
 8000792:	0013      	movs	r3, r2
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	4313      	orrs	r3, r2
 8000798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80007a6:	2201      	movs	r2, #1
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
 80007ac:	0013      	movs	r3, r2
 80007ae:	43da      	mvns	r2, r3
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	4013      	ands	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	091b      	lsrs	r3, r3, #4
 80007bc:	2201      	movs	r2, #1
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
 80007c4:	0013      	movs	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	2203      	movs	r2, #3
 80007de:	409a      	lsls	r2, r3
 80007e0:	0013      	movs	r3, r2
 80007e2:	43da      	mvns	r2, r3
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	4013      	ands	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	409a      	lsls	r2, r3
 80007f4:	0013      	movs	r3, r2
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	055b      	lsls	r3, r3, #21
 800080a:	4013      	ands	r3, r2
 800080c:	d100      	bne.n	8000810 <HAL_GPIO_Init+0x17c>
 800080e:	e09a      	b.n	8000946 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	4b54      	ldr	r3, [pc, #336]	; (8000964 <HAL_GPIO_Init+0x2d0>)
 8000812:	699a      	ldr	r2, [r3, #24]
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <HAL_GPIO_Init+0x2d0>)
 8000816:	2101      	movs	r1, #1
 8000818:	430a      	orrs	r2, r1
 800081a:	619a      	str	r2, [r3, #24]
 800081c:	4b51      	ldr	r3, [pc, #324]	; (8000964 <HAL_GPIO_Init+0x2d0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	2201      	movs	r2, #1
 8000822:	4013      	ands	r3, r2
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000828:	4a4f      	ldr	r2, [pc, #316]	; (8000968 <HAL_GPIO_Init+0x2d4>)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	089b      	lsrs	r3, r3, #2
 800082e:	3302      	adds	r3, #2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	589b      	ldr	r3, [r3, r2]
 8000834:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	2203      	movs	r2, #3
 800083a:	4013      	ands	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	220f      	movs	r2, #15
 8000840:	409a      	lsls	r2, r3
 8000842:	0013      	movs	r3, r2
 8000844:	43da      	mvns	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	429a      	cmp	r2, r3
 8000854:	d013      	beq.n	800087e <HAL_GPIO_Init+0x1ea>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a44      	ldr	r2, [pc, #272]	; (800096c <HAL_GPIO_Init+0x2d8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d00d      	beq.n	800087a <HAL_GPIO_Init+0x1e6>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a43      	ldr	r2, [pc, #268]	; (8000970 <HAL_GPIO_Init+0x2dc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d007      	beq.n	8000876 <HAL_GPIO_Init+0x1e2>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a42      	ldr	r2, [pc, #264]	; (8000974 <HAL_GPIO_Init+0x2e0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d101      	bne.n	8000872 <HAL_GPIO_Init+0x1de>
 800086e:	2303      	movs	r3, #3
 8000870:	e006      	b.n	8000880 <HAL_GPIO_Init+0x1ec>
 8000872:	2305      	movs	r3, #5
 8000874:	e004      	b.n	8000880 <HAL_GPIO_Init+0x1ec>
 8000876:	2302      	movs	r3, #2
 8000878:	e002      	b.n	8000880 <HAL_GPIO_Init+0x1ec>
 800087a:	2301      	movs	r3, #1
 800087c:	e000      	b.n	8000880 <HAL_GPIO_Init+0x1ec>
 800087e:	2300      	movs	r3, #0
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	2103      	movs	r1, #3
 8000884:	400a      	ands	r2, r1
 8000886:	0092      	lsls	r2, r2, #2
 8000888:	4093      	lsls	r3, r2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000890:	4935      	ldr	r1, [pc, #212]	; (8000968 <HAL_GPIO_Init+0x2d4>)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	3302      	adds	r3, #2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	43da      	mvns	r2, r3
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	4013      	ands	r3, r2
 80008b8:	d003      	beq.n	80008c2 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	43da      	mvns	r2, r3
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	4013      	ands	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	029b      	lsls	r3, r3, #10
 80008e0:	4013      	ands	r3, r2
 80008e2:	d003      	beq.n	80008ec <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	035b      	lsls	r3, r3, #13
 800090a:	4013      	ands	r3, r2
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4313      	orrs	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	43da      	mvns	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	039b      	lsls	r3, r3, #14
 8000934:	4013      	ands	r3, r2
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_GPIO_Init+0x2e4>)
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	40da      	lsrs	r2, r3
 8000954:	1e13      	subs	r3, r2, #0
 8000956:	d000      	beq.n	800095a <HAL_GPIO_Init+0x2c6>
 8000958:	e6a8      	b.n	80006ac <HAL_GPIO_Init+0x18>
  } 
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b006      	add	sp, #24
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40021000 	.word	0x40021000
 8000968:	40010000 	.word	0x40010000
 800096c:	48000400 	.word	0x48000400
 8000970:	48000800 	.word	0x48000800
 8000974:	48000c00 	.word	0x48000c00
 8000978:	40010400 	.word	0x40010400

0800097c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	0008      	movs	r0, r1
 8000986:	0011      	movs	r1, r2
 8000988:	1cbb      	adds	r3, r7, #2
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	1c7b      	adds	r3, r7, #1
 8000990:	1c0a      	adds	r2, r1, #0
 8000992:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000994:	1c7b      	adds	r3, r7, #1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800099c:	1cbb      	adds	r3, r7, #2
 800099e:	881a      	ldrh	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009a4:	e003      	b.n	80009ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009a6:	1cbb      	adds	r3, r7, #2
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	d100      	bne.n	80009d0 <HAL_RCC_OscConfig+0x18>
 80009ce:	e08d      	b.n	8000aec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009d0:	4bc5      	ldr	r3, [pc, #788]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	220c      	movs	r2, #12
 80009d6:	4013      	ands	r3, r2
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d00e      	beq.n	80009fa <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009dc:	4bc2      	ldr	r3, [pc, #776]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	220c      	movs	r2, #12
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d116      	bne.n	8000a16 <HAL_RCC_OscConfig+0x5e>
 80009e8:	4bbf      	ldr	r3, [pc, #764]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	025b      	lsls	r3, r3, #9
 80009f0:	401a      	ands	r2, r3
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d10d      	bne.n	8000a16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009fa:	4bbb      	ldr	r3, [pc, #748]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	029b      	lsls	r3, r3, #10
 8000a02:	4013      	ands	r3, r2
 8000a04:	d100      	bne.n	8000a08 <HAL_RCC_OscConfig+0x50>
 8000a06:	e070      	b.n	8000aea <HAL_RCC_OscConfig+0x132>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d000      	beq.n	8000a12 <HAL_RCC_OscConfig+0x5a>
 8000a10:	e06b      	b.n	8000aea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e2ba      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d107      	bne.n	8000a2e <HAL_RCC_OscConfig+0x76>
 8000a1e:	4bb2      	ldr	r3, [pc, #712]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4bb1      	ldr	r3, [pc, #708]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0249      	lsls	r1, r1, #9
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e02f      	b.n	8000a8e <HAL_RCC_OscConfig+0xd6>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10c      	bne.n	8000a50 <HAL_RCC_OscConfig+0x98>
 8000a36:	4bac      	ldr	r3, [pc, #688]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4bab      	ldr	r3, [pc, #684]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a3c:	49ab      	ldr	r1, [pc, #684]	; (8000cec <HAL_RCC_OscConfig+0x334>)
 8000a3e:	400a      	ands	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	4ba9      	ldr	r3, [pc, #676]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4ba8      	ldr	r3, [pc, #672]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a48:	49a9      	ldr	r1, [pc, #676]	; (8000cf0 <HAL_RCC_OscConfig+0x338>)
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e01e      	b.n	8000a8e <HAL_RCC_OscConfig+0xd6>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10e      	bne.n	8000a76 <HAL_RCC_OscConfig+0xbe>
 8000a58:	4ba3      	ldr	r3, [pc, #652]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4ba2      	ldr	r3, [pc, #648]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	02c9      	lsls	r1, r1, #11
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	4ba0      	ldr	r3, [pc, #640]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b9f      	ldr	r3, [pc, #636]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0249      	lsls	r1, r1, #9
 8000a70:	430a      	orrs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	e00b      	b.n	8000a8e <HAL_RCC_OscConfig+0xd6>
 8000a76:	4b9c      	ldr	r3, [pc, #624]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b9b      	ldr	r3, [pc, #620]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a7c:	499b      	ldr	r1, [pc, #620]	; (8000cec <HAL_RCC_OscConfig+0x334>)
 8000a7e:	400a      	ands	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	4b99      	ldr	r3, [pc, #612]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b98      	ldr	r3, [pc, #608]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000a88:	4999      	ldr	r1, [pc, #612]	; (8000cf0 <HAL_RCC_OscConfig+0x338>)
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d014      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a96:	f7ff fd3f 	bl	8000518 <HAL_GetTick>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aa0:	f7ff fd3a 	bl	8000518 <HAL_GetTick>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b64      	cmp	r3, #100	; 0x64
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e26c      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab2:	4b8d      	ldr	r3, [pc, #564]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	029b      	lsls	r3, r3, #10
 8000aba:	4013      	ands	r3, r2
 8000abc:	d0f0      	beq.n	8000aa0 <HAL_RCC_OscConfig+0xe8>
 8000abe:	e015      	b.n	8000aec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fd2a 	bl	8000518 <HAL_GetTick>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac8:	e008      	b.n	8000adc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fd25 	bl	8000518 <HAL_GetTick>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b64      	cmp	r3, #100	; 0x64
 8000ad6:	d901      	bls.n	8000adc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e257      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000adc:	4b82      	ldr	r3, [pc, #520]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d1f0      	bne.n	8000aca <HAL_RCC_OscConfig+0x112>
 8000ae8:	e000      	b.n	8000aec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2202      	movs	r2, #2
 8000af2:	4013      	ands	r3, r2
 8000af4:	d100      	bne.n	8000af8 <HAL_RCC_OscConfig+0x140>
 8000af6:	e06c      	b.n	8000bd2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000af8:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	220c      	movs	r2, #12
 8000afe:	4013      	ands	r3, r2
 8000b00:	d00e      	beq.n	8000b20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b02:	4b79      	ldr	r3, [pc, #484]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	220c      	movs	r2, #12
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d11f      	bne.n	8000b4e <HAL_RCC_OscConfig+0x196>
 8000b0e:	4b76      	ldr	r3, [pc, #472]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	23c0      	movs	r3, #192	; 0xc0
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	401a      	ands	r2, r3
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d116      	bne.n	8000b4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b20:	4b71      	ldr	r3, [pc, #452]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2202      	movs	r2, #2
 8000b26:	4013      	ands	r3, r2
 8000b28:	d005      	beq.n	8000b36 <HAL_RCC_OscConfig+0x17e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d001      	beq.n	8000b36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e22a      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b36:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	22f8      	movs	r2, #248	; 0xf8
 8000b3c:	4393      	bics	r3, r2
 8000b3e:	0019      	movs	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	00da      	lsls	r2, r3, #3
 8000b46:	4b68      	ldr	r3, [pc, #416]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4c:	e041      	b.n	8000bd2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d024      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b56:	4b64      	ldr	r3, [pc, #400]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fcd9 	bl	8000518 <HAL_GetTick>
 8000b66:	0003      	movs	r3, r0
 8000b68:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6a:	e008      	b.n	8000b7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6c:	f7ff fcd4 	bl	8000518 <HAL_GetTick>
 8000b70:	0002      	movs	r2, r0
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d901      	bls.n	8000b7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e206      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	d0f1      	beq.n	8000b6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b88:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	22f8      	movs	r2, #248	; 0xf8
 8000b8e:	4393      	bics	r3, r2
 8000b90:	0019      	movs	r1, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	00da      	lsls	r2, r3, #3
 8000b98:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e018      	b.n	8000bd2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ba0:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bac:	f7ff fcb4 	bl	8000518 <HAL_GetTick>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fcaf 	bl	8000518 <HAL_GetTick>
 8000bba:	0002      	movs	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e1e1      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2202      	movs	r2, #2
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d1f1      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d036      	beq.n	8000c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d019      	beq.n	8000c18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000be4:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000be8:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	430a      	orrs	r2, r1
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf0:	f7ff fc92 	bl	8000518 <HAL_GetTick>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bfa:	f7ff fc8d 	bl	8000518 <HAL_GetTick>
 8000bfe:	0002      	movs	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e1bf      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	2202      	movs	r2, #2
 8000c12:	4013      	ands	r3, r2
 8000c14:	d0f1      	beq.n	8000bfa <HAL_RCC_OscConfig+0x242>
 8000c16:	e018      	b.n	8000c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	438a      	bics	r2, r1
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c24:	f7ff fc78 	bl	8000518 <HAL_GetTick>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c2c:	e008      	b.n	8000c40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fc73 	bl	8000518 <HAL_GetTick>
 8000c32:	0002      	movs	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e1a5      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	2202      	movs	r2, #2
 8000c46:	4013      	ands	r3, r2
 8000c48:	d1f1      	bne.n	8000c2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4013      	ands	r3, r2
 8000c52:	d100      	bne.n	8000c56 <HAL_RCC_OscConfig+0x29e>
 8000c54:	e0b6      	b.n	8000dc4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c56:	2317      	movs	r3, #23
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	055b      	lsls	r3, r3, #21
 8000c66:	4013      	ands	r3, r2
 8000c68:	d111      	bne.n	8000c8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	69da      	ldr	r2, [r3, #28]
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0549      	lsls	r1, r1, #21
 8000c74:	430a      	orrs	r2, r1
 8000c76:	61da      	str	r2, [r3, #28]
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	69da      	ldr	r2, [r3, #28]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	055b      	lsls	r3, r3, #21
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c86:	2317      	movs	r3, #23
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_RCC_OscConfig+0x33c>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4013      	ands	r3, r2
 8000c98:	d11a      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_RCC_OscConfig+0x33c>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_RCC_OscConfig+0x33c>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ca8:	f7ff fc36 	bl	8000518 <HAL_GetTick>
 8000cac:	0003      	movs	r3, r0
 8000cae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb0:	e008      	b.n	8000cc4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb2:	f7ff fc31 	bl	8000518 <HAL_GetTick>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b64      	cmp	r3, #100	; 0x64
 8000cbe:	d901      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e163      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_RCC_OscConfig+0x33c>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d0f0      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10f      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x340>
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000cda:	6a1a      	ldr	r2, [r3, #32]
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <HAL_RCC_OscConfig+0x330>)
 8000cde:	2101      	movs	r1, #1
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	621a      	str	r2, [r3, #32]
 8000ce4:	e036      	b.n	8000d54 <HAL_RCC_OscConfig+0x39c>
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	fffeffff 	.word	0xfffeffff
 8000cf0:	fffbffff 	.word	0xfffbffff
 8000cf4:	40007000 	.word	0x40007000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10c      	bne.n	8000d1a <HAL_RCC_OscConfig+0x362>
 8000d00:	4ba4      	ldr	r3, [pc, #656]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	4ba3      	ldr	r3, [pc, #652]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	438a      	bics	r2, r1
 8000d0a:	621a      	str	r2, [r3, #32]
 8000d0c:	4ba1      	ldr	r3, [pc, #644]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d0e:	6a1a      	ldr	r2, [r3, #32]
 8000d10:	4ba0      	ldr	r3, [pc, #640]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d12:	2104      	movs	r1, #4
 8000d14:	438a      	bics	r2, r1
 8000d16:	621a      	str	r2, [r3, #32]
 8000d18:	e01c      	b.n	8000d54 <HAL_RCC_OscConfig+0x39c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0x384>
 8000d22:	4b9c      	ldr	r3, [pc, #624]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d24:	6a1a      	ldr	r2, [r3, #32]
 8000d26:	4b9b      	ldr	r3, [pc, #620]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d28:	2104      	movs	r1, #4
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	621a      	str	r2, [r3, #32]
 8000d2e:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d30:	6a1a      	ldr	r2, [r3, #32]
 8000d32:	4b98      	ldr	r3, [pc, #608]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	430a      	orrs	r2, r1
 8000d38:	621a      	str	r2, [r3, #32]
 8000d3a:	e00b      	b.n	8000d54 <HAL_RCC_OscConfig+0x39c>
 8000d3c:	4b95      	ldr	r3, [pc, #596]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d3e:	6a1a      	ldr	r2, [r3, #32]
 8000d40:	4b94      	ldr	r3, [pc, #592]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	438a      	bics	r2, r1
 8000d46:	621a      	str	r2, [r3, #32]
 8000d48:	4b92      	ldr	r3, [pc, #584]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	4b91      	ldr	r3, [pc, #580]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d4e:	2104      	movs	r1, #4
 8000d50:	438a      	bics	r2, r1
 8000d52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d014      	beq.n	8000d86 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fbdc 	bl	8000518 <HAL_GetTick>
 8000d60:	0003      	movs	r3, r0
 8000d62:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d64:	e009      	b.n	8000d7a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d66:	f7ff fbd7 	bl	8000518 <HAL_GetTick>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	4a89      	ldr	r2, [pc, #548]	; (8000f98 <HAL_RCC_OscConfig+0x5e0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e108      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7a:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x3ae>
 8000d84:	e013      	b.n	8000dae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d86:	f7ff fbc7 	bl	8000518 <HAL_GetTick>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d8e:	e009      	b.n	8000da4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d90:	f7ff fbc2 	bl	8000518 <HAL_GetTick>
 8000d94:	0002      	movs	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	4a7f      	ldr	r2, [pc, #508]	; (8000f98 <HAL_RCC_OscConfig+0x5e0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e0f3      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da4:	4b7b      	ldr	r3, [pc, #492]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	2202      	movs	r2, #2
 8000daa:	4013      	ands	r3, r2
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dae:	2317      	movs	r3, #23
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d105      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000db8:	4b76      	ldr	r3, [pc, #472]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000dba:	69da      	ldr	r2, [r3, #28]
 8000dbc:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000dbe:	4977      	ldr	r1, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x5e4>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2210      	movs	r2, #16
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d063      	beq.n	8000e96 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d12a      	bne.n	8000e2c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dd6:	4b6f      	ldr	r3, [pc, #444]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dda:	4b6e      	ldr	r3, [pc, #440]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000ddc:	2104      	movs	r1, #4
 8000dde:	430a      	orrs	r2, r1
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000de2:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de6:	4b6b      	ldr	r3, [pc, #428]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fb93 	bl	8000518 <HAL_GetTick>
 8000df2:	0003      	movs	r3, r0
 8000df4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000df8:	f7ff fb8e 	bl	8000518 <HAL_GetTick>
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e0c0      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e0a:	4b62      	ldr	r3, [pc, #392]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4013      	ands	r3, r2
 8000e12:	d0f1      	beq.n	8000df8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e14:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e18:	22f8      	movs	r2, #248	; 0xf8
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2a:	e034      	b.n	8000e96 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	3305      	adds	r3, #5
 8000e32:	d111      	bne.n	8000e58 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e34:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e38:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e40:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	22f8      	movs	r2, #248	; 0xf8
 8000e46:	4393      	bics	r3, r2
 8000e48:	0019      	movs	r1, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	00da      	lsls	r2, r3, #3
 8000e50:	4b50      	ldr	r3, [pc, #320]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
 8000e56:	e01e      	b.n	8000e96 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e58:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e5c:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e5e:	2104      	movs	r1, #4
 8000e60:	430a      	orrs	r2, r1
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000e64:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e70:	f7ff fb52 	bl	8000518 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e7a:	f7ff fb4d 	bl	8000518 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e07f      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e8c:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	2202      	movs	r2, #2
 8000e92:	4013      	ands	r3, r2
 8000e94:	d1f1      	bne.n	8000e7a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d100      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x4e8>
 8000e9e:	e074      	b.n	8000f8a <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea0:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x4f6>
 8000eac:	e06b      	b.n	8000f86 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d14c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000ebc:	4938      	ldr	r1, [pc, #224]	; (8000fa0 <HAL_RCC_OscConfig+0x5e8>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb29 	bl	8000518 <HAL_GetTick>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ecc:	f7ff fb24 	bl	8000518 <HAL_GetTick>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e056      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	049b      	lsls	r3, r3, #18
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	220f      	movs	r2, #15
 8000ef0:	4393      	bics	r3, r2
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000efa:	430a      	orrs	r2, r1
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <HAL_RCC_OscConfig+0x5ec>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	0019      	movs	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	431a      	orrs	r2, r3
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0449      	lsls	r1, r1, #17
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff faf7 	bl	8000518 <HAL_GetTick>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff faf2 	bl	8000518 <HAL_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e024      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	049b      	lsls	r3, r3, #18
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0x578>
 8000f4e:	e01c      	b.n	8000f8a <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f56:	4912      	ldr	r1, [pc, #72]	; (8000fa0 <HAL_RCC_OscConfig+0x5e8>)
 8000f58:	400a      	ands	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fadc 	bl	8000518 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fad7 	bl	8000518 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e009      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_RCC_OscConfig+0x5dc>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	049b      	lsls	r3, r3, #18
 8000f80:	4013      	ands	r3, r2
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x5ae>
 8000f84:	e001      	b.n	8000f8a <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_RCC_OscConfig+0x5d4>
    }
  }
  
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b006      	add	sp, #24
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	00001388 	.word	0x00001388
 8000f9c:	efffffff 	.word	0xefffffff
 8000fa0:	feffffff 	.word	0xfeffffff
 8000fa4:	ffc27fff 	.word	0xffc27fff

08000fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fb6:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d911      	bls.n	8000fe8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4393      	bics	r3, r2
 8000fcc:	0019      	movs	r1, r3
 8000fce:	4b64      	ldr	r3, [pc, #400]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fd6:	4b62      	ldr	r3, [pc, #392]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0b6      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d009      	beq.n	8001006 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff2:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	22f0      	movs	r2, #240	; 0xf0
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	4b58      	ldr	r3, [pc, #352]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	430a      	orrs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2201      	movs	r2, #1
 800100c:	4013      	ands	r3, r2
 800100e:	d100      	bne.n	8001012 <HAL_RCC_ClockConfig+0x6a>
 8001010:	e067      	b.n	80010e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b52      	ldr	r3, [pc, #328]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d114      	bne.n	8001050 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e095      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d107      	bne.n	8001042 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	049b      	lsls	r3, r3, #18
 800103a:	4013      	ands	r3, r2
 800103c:	d108      	bne.n	8001050 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e089      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2202      	movs	r2, #2
 8001048:	4013      	ands	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e082      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2203      	movs	r2, #3
 8001056:	4393      	bics	r3, r2
 8001058:	0019      	movs	r1, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	430a      	orrs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001064:	f7ff fa58 	bl	8000518 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d111      	bne.n	8001098 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001074:	e009      	b.n	800108a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001076:	f7ff fa4f 	bl	8000518 <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	4a39      	ldr	r2, [pc, #228]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e065      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	220c      	movs	r2, #12
 8001090:	4013      	ands	r3, r2
 8001092:	2b04      	cmp	r3, #4
 8001094:	d1ef      	bne.n	8001076 <HAL_RCC_ClockConfig+0xce>
 8001096:	e024      	b.n	80010e2 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d11b      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a0:	e009      	b.n	80010b6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a2:	f7ff fa39 	bl	8000518 <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e04f      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	220c      	movs	r2, #12
 80010bc:	4013      	ands	r3, r2
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d1ef      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xfa>
 80010c2:	e00e      	b.n	80010e2 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff fa28 	bl	8000518 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	4a26      	ldr	r2, [pc, #152]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e03e      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	220c      	movs	r2, #12
 80010de:	4013      	ands	r3, r2
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d211      	bcs.n	8001114 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	4393      	bics	r3, r2
 80010f8:	0019      	movs	r1, r3
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e020      	b.n	8001156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2204      	movs	r2, #4
 800111a:	4013      	ands	r3, r2
 800111c:	d009      	beq.n	8001132 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	4013      	ands	r3, r2
 8001126:	0019      	movs	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	430a      	orrs	r2, r1
 8001130:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001132:	f000 f821 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 8001136:	0001      	movs	r1, r0
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	220f      	movs	r2, #15
 8001140:	4013      	ands	r3, r2
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_RCC_ClockConfig+0x1c8>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	000a      	movs	r2, r1
 8001148:	40da      	lsrs	r2, r3
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_RCC_ClockConfig+0x1cc>)
 800114c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800114e:	2003      	movs	r0, #3
 8001150:	f7ff f9ba 	bl	80004c8 <HAL_InitTick>
  
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	40022000 	.word	0x40022000
 8001164:	40021000 	.word	0x40021000
 8001168:	00001388 	.word	0x00001388
 800116c:	fffff8ff 	.word	0xfffff8ff
 8001170:	08002f3c 	.word	0x08002f3c
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	; 0x3c
 800117c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800117e:	2314      	movs	r3, #20
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001186:	c313      	stmia	r3!, {r0, r1, r4}
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001190:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001192:	c313      	stmia	r3!, {r0, r1, r4}
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_RCC_GetSysClockFreq+0xc4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	220c      	movs	r2, #12
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d002      	beq.n	80011c2 <HAL_RCC_GetSysClockFreq+0x4a>
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d003      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x50>
 80011c0:	e02f      	b.n	8001222 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011c6:	e02f      	b.n	8001228 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	220f      	movs	r2, #15
 80011ce:	4013      	ands	r3, r2
 80011d0:	2214      	movs	r2, #20
 80011d2:	18ba      	adds	r2, r7, r2
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_RCC_GetSysClockFreq+0xc4>)
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	220f      	movs	r2, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	1d3a      	adds	r2, r7, #4
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80011e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e8:	23c0      	movs	r3, #192	; 0xc0
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	401a      	ands	r2, r3
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	025b      	lsls	r3, r3, #9
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d109      	bne.n	800120a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80011f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011fa:	f7fe ff85 	bl	8000108 <__udivsi3>
 80011fe:	0003      	movs	r3, r0
 8001200:	001a      	movs	r2, r3
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	4353      	muls	r3, r2
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
 8001208:	e008      	b.n	800121c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800120a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <HAL_RCC_GetSysClockFreq+0xc8>)
 800120e:	f7fe ff7b 	bl	8000108 <__udivsi3>
 8001212:	0003      	movs	r3, r0
 8001214:	001a      	movs	r2, r3
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	4353      	muls	r3, r2
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001220:	e002      	b.n	8001228 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001226:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b00f      	add	sp, #60	; 0x3c
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	08002ef4 	.word	0x08002ef4
 8001238:	08002f04 	.word	0x08002f04
 800123c:	40021000 	.word	0x40021000
 8001240:	007a1200 	.word	0x007a1200

08001244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <HAL_RCC_GetHCLKFreq+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800125c:	f7ff fff2 	bl	8001244 <HAL_RCC_GetHCLKFreq>
 8001260:	0001      	movs	r1, r0
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	2207      	movs	r2, #7
 800126a:	4013      	ands	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	40d9      	lsrs	r1, r3
 8001272:	000b      	movs	r3, r1
}    
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40021000 	.word	0x40021000
 8001280:	08002f4c 	.word	0x08002f4c

08001284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	4013      	ands	r3, r2
 800129e:	d100      	bne.n	80012a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80012a0:	e08f      	b.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80012a2:	2317      	movs	r3, #23
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012ac:	69da      	ldr	r2, [r3, #28]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	055b      	lsls	r3, r3, #21
 80012b2:	4013      	ands	r3, r2
 80012b4:	d111      	bne.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	0549      	lsls	r1, r1, #21
 80012c0:	430a      	orrs	r2, r1
 80012c2:	61da      	str	r2, [r3, #28]
 80012c4:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	055b      	lsls	r3, r3, #21
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d2:	2317      	movs	r3, #23
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d11a      	bne.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b49      	ldr	r3, [pc, #292]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b48      	ldr	r3, [pc, #288]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0049      	lsls	r1, r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f4:	f7ff f910 	bl	8000518 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	e008      	b.n	8001310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fe:	f7ff f90b 	bl	8000518 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b64      	cmp	r3, #100	; 0x64
 800130a:	d901      	bls.n	8001310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e077      	b.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d0f0      	beq.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	23c0      	movs	r3, #192	; 0xc0
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d034      	beq.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4013      	ands	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	d02c      	beq.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0249      	lsls	r1, r1, #9
 8001352:	430a      	orrs	r2, r1
 8001354:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001358:	6a1a      	ldr	r2, [r3, #32]
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800135c:	492d      	ldr	r1, [pc, #180]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800135e:	400a      	ands	r2, r1
 8001360:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	4013      	ands	r3, r2
 800136e:	d013      	beq.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff f8d2 	bl	8000518 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	e009      	b.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff f8cd 	bl	8000518 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e038      	b.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800139e:	4013      	ands	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013ac:	2317      	movs	r3, #23
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d105      	bne.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013bc:	4917      	ldr	r1, [pc, #92]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80013be:	400a      	ands	r2, r1
 80013c0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4013      	ands	r3, r2
 80013ca:	d009      	beq.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	2203      	movs	r2, #3
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2220      	movs	r2, #32
 80013e6:	4013      	ands	r3, r2
 80013e8:	d009      	beq.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	2210      	movs	r2, #16
 80013f0:	4393      	bics	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b006      	add	sp, #24
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	fffffcff 	.word	0xfffffcff
 8001414:	fffeffff 	.word	0xfffeffff
 8001418:	00001388 	.word	0x00001388
 800141c:	efffffff 	.word	0xefffffff

08001420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e08a      	b.n	8001548 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	225d      	movs	r2, #93	; 0x5d
 800143c:	5c9b      	ldrb	r3, [r3, r2]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	225c      	movs	r2, #92	; 0x5c
 8001448:	2100      	movs	r1, #0
 800144a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	0018      	movs	r0, r3
 8001450:	f001 fbc0 	bl	8002bd4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	225d      	movs	r2, #93	; 0x5d
 8001458:	2102      	movs	r1, #2
 800145a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	438a      	bics	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	23e0      	movs	r3, #224	; 0xe0
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	429a      	cmp	r2, r3
 8001476:	d902      	bls.n	800147e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e002      	b.n	8001484 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	015b      	lsls	r3, r3, #5
 8001482:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	23f0      	movs	r3, #240	; 0xf0
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	429a      	cmp	r2, r3
 800148e:	d008      	beq.n	80014a2 <HAL_SPI_Init+0x82>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	23e0      	movs	r3, #224	; 0xe0
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	429a      	cmp	r2, r3
 800149a:	d002      	beq.n	80014a2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	23e0      	movs	r3, #224	; 0xe0
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d903      	bls.n	80014be <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
 80014bc:	e002      	b.n	80014c4 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6999      	ldr	r1, [r3, #24]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	400b      	ands	r3, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	0011      	movs	r1, r2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	2204      	movs	r2, #4
 8001508:	401a      	ands	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	431a      	orrs	r2, r3
 800151c:	0011      	movs	r1, r2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4907      	ldr	r1, [pc, #28]	; (8001550 <HAL_SPI_Init+0x130>)
 8001534:	400a      	ands	r2, r1
 8001536:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	225d      	movs	r2, #93	; 0x5d
 8001542:	2101      	movs	r1, #1
 8001544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}
 8001550:	fffff7ff 	.word	0xfffff7ff

08001554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e047      	b.n	80015f6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2269      	movs	r2, #105	; 0x69
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2268      	movs	r2, #104	; 0x68
 8001576:	2100      	movs	r1, #0
 8001578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f001 fb75 	bl	8002c6c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2269      	movs	r2, #105	; 0x69
 8001586:	2124      	movs	r1, #36	; 0x24
 8001588:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0018      	movs	r0, r3
 800159e:	f000 f831 	bl	8001604 <UART_SetConfig>
 80015a2:	0003      	movs	r3, r0
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e024      	b.n	80015f6 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f9ca 	bl	8001950 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	490e      	ldr	r1, [pc, #56]	; (8001600 <HAL_UART_Init+0xac>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2108      	movs	r1, #8
 80015d8:	438a      	bics	r2, r1
 80015da:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 fa62 	bl	8001ab8 <UART_CheckIdleState>
 80015f4:	0003      	movs	r3, r0
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	fffff7ff 	.word	0xfffff7ff

08001604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001610:	2317      	movs	r3, #23
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2210      	movs	r2, #16
 8001616:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001618:	230a      	movs	r3, #10
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001620:	2314      	movs	r3, #20
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001628:	2313      	movs	r3, #19
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4313      	orrs	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4ab4      	ldr	r2, [pc, #720]	; (8001920 <UART_SetConfig+0x31c>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4aaf      	ldr	r2, [pc, #700]	; (8001924 <UART_SetConfig+0x320>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4aa7      	ldr	r2, [pc, #668]	; (8001928 <UART_SetConfig+0x324>)
 800168a:	4013      	ands	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4aa3      	ldr	r2, [pc, #652]	; (800192c <UART_SetConfig+0x328>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d125      	bne.n	80016ee <UART_SetConfig+0xea>
 80016a2:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <UART_SetConfig+0x32c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d00f      	beq.n	80016ce <UART_SetConfig+0xca>
 80016ae:	d304      	bcc.n	80016ba <UART_SetConfig+0xb6>
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d011      	beq.n	80016d8 <UART_SetConfig+0xd4>
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d005      	beq.n	80016c4 <UART_SetConfig+0xc0>
 80016b8:	e013      	b.n	80016e2 <UART_SetConfig+0xde>
 80016ba:	2317      	movs	r3, #23
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e04a      	b.n	800175a <UART_SetConfig+0x156>
 80016c4:	2317      	movs	r3, #23
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2202      	movs	r2, #2
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	e045      	b.n	800175a <UART_SetConfig+0x156>
 80016ce:	2317      	movs	r3, #23
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2204      	movs	r2, #4
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e040      	b.n	800175a <UART_SetConfig+0x156>
 80016d8:	2317      	movs	r3, #23
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	2208      	movs	r2, #8
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e03b      	b.n	800175a <UART_SetConfig+0x156>
 80016e2:	2317      	movs	r3, #23
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	2210      	movs	r2, #16
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	e035      	b.n	800175a <UART_SetConfig+0x156>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a90      	ldr	r2, [pc, #576]	; (8001934 <UART_SetConfig+0x330>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d104      	bne.n	8001702 <UART_SetConfig+0xfe>
 80016f8:	2317      	movs	r3, #23
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e02b      	b.n	800175a <UART_SetConfig+0x156>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a8c      	ldr	r2, [pc, #560]	; (8001938 <UART_SetConfig+0x334>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d104      	bne.n	8001716 <UART_SetConfig+0x112>
 800170c:	2317      	movs	r3, #23
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e021      	b.n	800175a <UART_SetConfig+0x156>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a88      	ldr	r2, [pc, #544]	; (800193c <UART_SetConfig+0x338>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d104      	bne.n	800172a <UART_SetConfig+0x126>
 8001720:	2317      	movs	r3, #23
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e017      	b.n	800175a <UART_SetConfig+0x156>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a84      	ldr	r2, [pc, #528]	; (8001940 <UART_SetConfig+0x33c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d104      	bne.n	800173e <UART_SetConfig+0x13a>
 8001734:	2317      	movs	r3, #23
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e00d      	b.n	800175a <UART_SetConfig+0x156>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a80      	ldr	r2, [pc, #512]	; (8001944 <UART_SetConfig+0x340>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d104      	bne.n	8001752 <UART_SetConfig+0x14e>
 8001748:	2317      	movs	r3, #23
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e003      	b.n	800175a <UART_SetConfig+0x156>
 8001752:	2317      	movs	r3, #23
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2210      	movs	r2, #16
 8001758:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	429a      	cmp	r2, r3
 8001764:	d000      	beq.n	8001768 <UART_SetConfig+0x164>
 8001766:	e077      	b.n	8001858 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 8001768:	2317      	movs	r3, #23
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d01c      	beq.n	80017ac <UART_SetConfig+0x1a8>
 8001772:	dc02      	bgt.n	800177a <UART_SetConfig+0x176>
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <UART_SetConfig+0x180>
 8001778:	e04f      	b.n	800181a <UART_SetConfig+0x216>
 800177a:	2b04      	cmp	r3, #4
 800177c:	d027      	beq.n	80017ce <UART_SetConfig+0x1ca>
 800177e:	2b08      	cmp	r3, #8
 8001780:	d039      	beq.n	80017f6 <UART_SetConfig+0x1f2>
 8001782:	e04a      	b.n	800181a <UART_SetConfig+0x216>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001784:	f7ff fd68 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 8001788:	0003      	movs	r3, r0
 800178a:	005a      	lsls	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	18d2      	adds	r2, r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0019      	movs	r1, r3
 800179a:	0010      	movs	r0, r2
 800179c:	f7fe fcb4 	bl	8000108 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	001a      	movs	r2, r3
 80017a4:	2314      	movs	r3, #20
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	801a      	strh	r2, [r3, #0]
        break;
 80017aa:	e03b      	b.n	8001824 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <UART_SetConfig+0x344>)
 80017b4:	189a      	adds	r2, r3, r2
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	0019      	movs	r1, r3
 80017bc:	0010      	movs	r0, r2
 80017be:	f7fe fca3 	bl	8000108 <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	001a      	movs	r2, r3
 80017c6:	2314      	movs	r3, #20
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	801a      	strh	r2, [r3, #0]
        break;
 80017cc:	e02a      	b.n	8001824 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017ce:	f7ff fcd3 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 80017d2:	0003      	movs	r3, r0
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	18d2      	adds	r2, r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	0019      	movs	r1, r3
 80017e4:	0010      	movs	r0, r2
 80017e6:	f7fe fc8f 	bl	8000108 <__udivsi3>
 80017ea:	0003      	movs	r3, r0
 80017ec:	001a      	movs	r2, r3
 80017ee:	2314      	movs	r3, #20
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	801a      	strh	r2, [r3, #0]
        break;
 80017f4:	e016      	b.n	8001824 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	0252      	lsls	r2, r2, #9
 8001800:	189a      	adds	r2, r3, r2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0019      	movs	r1, r3
 8001808:	0010      	movs	r0, r2
 800180a:	f7fe fc7d 	bl	8000108 <__udivsi3>
 800180e:	0003      	movs	r3, r0
 8001810:	001a      	movs	r2, r3
 8001812:	2314      	movs	r3, #20
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	801a      	strh	r2, [r3, #0]
        break;
 8001818:	e004      	b.n	8001824 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800181a:	2313      	movs	r3, #19
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
        break;
 8001822:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001824:	200a      	movs	r0, #10
 8001826:	183b      	adds	r3, r7, r0
 8001828:	2414      	movs	r4, #20
 800182a:	193a      	adds	r2, r7, r4
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	210f      	movs	r1, #15
 8001830:	438a      	bics	r2, r1
 8001832:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001834:	193b      	adds	r3, r7, r4
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	105b      	asrs	r3, r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	b299      	uxth	r1, r3
 8001842:	183b      	adds	r3, r7, r0
 8001844:	183a      	adds	r2, r7, r0
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	183a      	adds	r2, r7, r0
 8001852:	8812      	ldrh	r2, [r2, #0]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e05b      	b.n	8001910 <UART_SetConfig+0x30c>
  }
  else
  {
    switch (clocksource)
 8001858:	2317      	movs	r3, #23
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d01b      	beq.n	800189a <UART_SetConfig+0x296>
 8001862:	dc02      	bgt.n	800186a <UART_SetConfig+0x266>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <UART_SetConfig+0x270>
 8001868:	e04d      	b.n	8001906 <UART_SetConfig+0x302>
 800186a:	2b04      	cmp	r3, #4
 800186c:	d026      	beq.n	80018bc <UART_SetConfig+0x2b8>
 800186e:	2b08      	cmp	r3, #8
 8001870:	d037      	beq.n	80018e2 <UART_SetConfig+0x2de>
 8001872:	e048      	b.n	8001906 <UART_SetConfig+0x302>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001874:	f7ff fcf0 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 8001878:	0002      	movs	r2, r0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	18d2      	adds	r2, r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f7fe fc3d 	bl	8000108 <__udivsi3>
 800188e:	0003      	movs	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60da      	str	r2, [r3, #12]
        break;
 8001898:	e03a      	b.n	8001910 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	4a2a      	ldr	r2, [pc, #168]	; (800194c <UART_SetConfig+0x348>)
 80018a2:	189a      	adds	r2, r3, r2
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	0019      	movs	r1, r3
 80018aa:	0010      	movs	r0, r2
 80018ac:	f7fe fc2c 	bl	8000108 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60da      	str	r2, [r3, #12]
        break;
 80018ba:	e029      	b.n	8001910 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018bc:	f7ff fc5c 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 80018c0:	0002      	movs	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	18d2      	adds	r2, r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0019      	movs	r1, r3
 80018d0:	0010      	movs	r0, r2
 80018d2:	f7fe fc19 	bl	8000108 <__udivsi3>
 80018d6:	0003      	movs	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60da      	str	r2, [r3, #12]
        break;
 80018e0:	e016      	b.n	8001910 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	0212      	lsls	r2, r2, #8
 80018ec:	189a      	adds	r2, r3, r2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0019      	movs	r1, r3
 80018f4:	0010      	movs	r0, r2
 80018f6:	f7fe fc07 	bl	8000108 <__udivsi3>
 80018fa:	0003      	movs	r3, r0
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60da      	str	r2, [r3, #12]
        break;
 8001904:	e004      	b.n	8001910 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001906:	2313      	movs	r3, #19
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
        break;
 800190e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001910:	2313      	movs	r3, #19
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]

}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b007      	add	sp, #28
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	efff69f3 	.word	0xefff69f3
 8001924:	ffffcfff 	.word	0xffffcfff
 8001928:	fffff4ff 	.word	0xfffff4ff
 800192c:	40013800 	.word	0x40013800
 8001930:	40021000 	.word	0x40021000
 8001934:	40004400 	.word	0x40004400
 8001938:	40004800 	.word	0x40004800
 800193c:	40004c00 	.word	0x40004c00
 8001940:	40005000 	.word	0x40005000
 8001944:	40011400 	.word	0x40011400
 8001948:	00f42400 	.word	0x00f42400
 800194c:	007a1200 	.word	0x007a1200

08001950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d00b      	beq.n	800197a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <UART_AdvFeatureConfig+0x144>)
 800196a:	4013      	ands	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d00b      	beq.n	800199c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a43      	ldr	r2, [pc, #268]	; (8001a98 <UART_AdvFeatureConfig+0x148>)
 800198c:	4013      	ands	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	d00b      	beq.n	80019be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <UART_AdvFeatureConfig+0x14c>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2208      	movs	r2, #8
 80019c4:	4013      	ands	r3, r2
 80019c6:	d00b      	beq.n	80019e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <UART_AdvFeatureConfig+0x150>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2210      	movs	r2, #16
 80019e6:	4013      	ands	r3, r2
 80019e8:	d00b      	beq.n	8001a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <UART_AdvFeatureConfig+0x154>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2220      	movs	r2, #32
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d00b      	beq.n	8001a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <UART_AdvFeatureConfig+0x158>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d01d      	beq.n	8001a6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <UART_AdvFeatureConfig+0x15c>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	035b      	lsls	r3, r3, #13
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d10b      	bne.n	8001a6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <UART_AdvFeatureConfig+0x160>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	4013      	ands	r3, r2
 8001a72:	d00b      	beq.n	8001a8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <UART_AdvFeatureConfig+0x164>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
  }
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fffdffff 	.word	0xfffdffff
 8001a98:	fffeffff 	.word	0xfffeffff
 8001a9c:	fffbffff 	.word	0xfffbffff
 8001aa0:	ffff7fff 	.word	0xffff7fff
 8001aa4:	ffffefff 	.word	0xffffefff
 8001aa8:	ffffdfff 	.word	0xffffdfff
 8001aac:	ffefffff 	.word	0xffefffff
 8001ab0:	ff9fffff 	.word	0xff9fffff
 8001ab4:	fff7ffff 	.word	0xfff7ffff

08001ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2269      	movs	r2, #105	; 0x69
 8001aca:	2120      	movs	r1, #32
 8001acc:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	226a      	movs	r2, #106	; 0x6a
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2268      	movs	r2, #104	; 0x68
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	1dbb      	adds	r3, r7, #6
 8001af2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001af8:	1dbb      	adds	r3, r7, #6
 8001afa:	2200      	movs	r2, #0
 8001afc:	5e9b      	ldrsh	r3, [r3, r2]
 8001afe:	2b84      	cmp	r3, #132	; 0x84
 8001b00:	d006      	beq.n	8001b10 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8001b02:	1dbb      	adds	r3, r7, #6
 8001b04:	2200      	movs	r2, #0
 8001b06:	5e9a      	ldrsh	r2, [r3, r2]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	18d3      	adds	r3, r2, r3
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b10:	68fb      	ldr	r3, [r7, #12]
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b1e:	f000 fa35 	bl	8001f8c <vTaskStartScheduler>
  
  return osOK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af02      	add	r7, sp, #8
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685c      	ldr	r4, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b40:	b29e      	uxth	r6, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2208      	movs	r2, #8
 8001b46:	5e9b      	ldrsh	r3, [r3, r2]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff ffcd 	bl	8001ae8 <makeFreeRtosPriority>
 8001b4e:	0001      	movs	r1, r0
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	230c      	movs	r3, #12
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	9100      	str	r1, [sp, #0]
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	0029      	movs	r1, r5
 8001b60:	0020      	movs	r0, r4
 8001b62:	f000 f8c7 	bl	8001cf4 <xTaskCreate>
 8001b66:	0003      	movs	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d001      	beq.n	8001b70 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e000      	b.n	8001b72 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8001b70:	68fb      	ldr	r3, [r7, #12]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b005      	add	sp, #20
 8001b78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <osDelay+0x16>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	e000      	b.n	8001b92 <osDelay+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f9d4 	bl	8001f40 <vTaskDelay>
  
  return osOK;
 8001b98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3308      	adds	r3, #8
 8001bae:	001a      	movs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4252      	negs	r2, r2
 8001bba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3308      	adds	r3, #8
 8001bca:	001a      	movs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	d103      	bne.n	8001c56 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e00c      	b.n	8001c70 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3308      	adds	r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e002      	b.n	8001c64 <vListInsert+0x2c>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d2f6      	bcs.n	8001c5e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6892      	ldr	r2, [r2, #8]
 8001cba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6852      	ldr	r2, [r2, #4]
 8001cc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d103      	bne.n	8001cd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	1e5a      	subs	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08d      	sub	sp, #52	; 0x34
 8001cf8:	af04      	add	r7, sp, #16
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fd68 	bl	80027e0 <pvPortMalloc>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001d1a:	2054      	movs	r0, #84	; 0x54
 8001d1c:	f000 fd60 	bl	80027e0 <pvPortMalloc>
 8001d20:	0003      	movs	r3, r0
 8001d22:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d30:	e006      	b.n	8001d40 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 fdf9 	bl	800292c <vPortFree>
 8001d3a:	e001      	b.n	8001d40 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d46:	1dbb      	adds	r3, r7, #6
 8001d48:	881a      	ldrh	r2, [r3, #0]
 8001d4a:	683c      	ldr	r4, [r7, #0]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	0023      	movs	r3, r4
 8001d62:	f000 f80f 	bl	8001d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f000 f885 	bl	8001e78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	e002      	b.n	8001d7a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d74:	2301      	movs	r3, #1
 8001d76:	425b      	negs	r3, r3
 8001d78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b009      	add	sp, #36	; 0x24
 8001d82:	bd90      	pop	{r4, r7, pc}

08001d84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4936      	ldr	r1, [pc, #216]	; (8001e74 <prvInitialiseNewTask+0xf0>)
 8001d9a:	468c      	mov	ip, r1
 8001d9c:	4463      	add	r3, ip
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2207      	movs	r2, #7
 8001da8:	4393      	bics	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	d001      	beq.n	8001db8 <prvInitialiseNewTask+0x34>
 8001db4:	b672      	cpsid	i
 8001db6:	e7fe      	b.n	8001db6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e013      	b.n	8001de6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	18d3      	adds	r3, r2, r3
 8001dc4:	7818      	ldrb	r0, [r3, #0]
 8001dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dc8:	2134      	movs	r1, #52	; 0x34
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	18d3      	adds	r3, r2, r3
 8001dce:	185b      	adds	r3, r3, r1
 8001dd0:	1c02      	adds	r2, r0, #0
 8001dd2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	18d3      	adds	r3, r2, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d9e8      	bls.n	8001dbe <prvInitialiseNewTask+0x3a>
 8001dec:	e000      	b.n	8001df0 <prvInitialiseNewTask+0x6c>
		{
			break;
 8001dee:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	2243      	movs	r2, #67	; 0x43
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d901      	bls.n	8001e02 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001dfe:	2306      	movs	r3, #6
 8001e00:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	6a3a      	ldr	r2, [r7, #32]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	2200      	movs	r2, #0
 8001e12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	3304      	adds	r3, #4
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff fee0 	bl	8001bde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	3318      	adds	r3, #24
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff fedb 	bl	8001bde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	2207      	movs	r2, #7
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	2200      	movs	r2, #0
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	2250      	movs	r2, #80	; 0x50
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	68f9      	ldr	r1, [r7, #12]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 fba2 	bl	800259c <pxPortInitialiseStack>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b006      	add	sp, #24
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	3fffffff 	.word	0x3fffffff

08001e78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e80:	f000 fc1c 	bl	80026bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <prvAddNewTaskToReadyList+0xb0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <prvAddNewTaskToReadyList+0xb0>)
 8001e8c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <prvAddNewTaskToReadyList+0xb4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <prvAddNewTaskToReadyList+0xb4>)
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <prvAddNewTaskToReadyList+0xb0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d110      	bne.n	8001ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ea4:	f000 fa56 	bl	8002354 <prvInitialiseTaskLists>
 8001ea8:	e00d      	b.n	8001ec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <prvAddNewTaskToReadyList+0xb8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <prvAddNewTaskToReadyList+0xb4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d802      	bhi.n	8001ec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <prvAddNewTaskToReadyList+0xb4>)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <prvAddNewTaskToReadyList+0xbc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <prvAddNewTaskToReadyList+0xbc>)
 8001ece:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <prvAddNewTaskToReadyList+0xc0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d903      	bls.n	8001ee4 <prvAddNewTaskToReadyList+0x6c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <prvAddNewTaskToReadyList+0xc0>)
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	0013      	movs	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	189b      	adds	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <prvAddNewTaskToReadyList+0xc4>)
 8001ef2:	189a      	adds	r2, r3, r2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	0019      	movs	r1, r3
 8001efa:	0010      	movs	r0, r2
 8001efc:	f7ff fe7a 	bl	8001bf4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f00:	f000 fbee 	bl	80026e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <prvAddNewTaskToReadyList+0xb8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <prvAddNewTaskToReadyList+0xb4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d201      	bcs.n	8001f1e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f1a:	f000 fbbf 	bl	800269c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000124 	.word	0x20000124
 8001f2c:	20000024 	.word	0x20000024
 8001f30:	20000130 	.word	0x20000130
 8001f34:	20000140 	.word	0x20000140
 8001f38:	2000012c 	.word	0x2000012c
 8001f3c:	20000028 	.word	0x20000028

08001f40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <vTaskDelay+0x48>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <vTaskDelay+0x1e>
 8001f5a:	b672      	cpsid	i
 8001f5c:	e7fe      	b.n	8001f5c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8001f5e:	f000 f84b 	bl	8001ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2100      	movs	r1, #0
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 fac4 	bl	80024f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f6c:	f000 f850 	bl	8002010 <xTaskResumeAll>
 8001f70:	0003      	movs	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8001f7a:	f000 fb8f 	bl	800269c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	2000014c 	.word	0x2000014c

08001f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001f92:	4913      	ldr	r1, [pc, #76]	; (8001fe0 <vTaskStartScheduler+0x54>)
 8001f94:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <vTaskStartScheduler+0x58>)
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <vTaskStartScheduler+0x5c>)
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	f7ff fea7 	bl	8001cf4 <xTaskCreate>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10d      	bne.n	8001fcc <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001fb0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <vTaskStartScheduler+0x60>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4252      	negs	r2, r2
 8001fb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <vTaskStartScheduler+0x64>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <vTaskStartScheduler+0x68>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001fc6:	f000 fb47 	bl	8002658 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001fca:	e004      	b.n	8001fd6 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <vTaskStartScheduler+0x4a>
 8001fd2:	b672      	cpsid	i
 8001fd4:	e7fe      	b.n	8001fd4 <vTaskStartScheduler+0x48>
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	08002f14 	.word	0x08002f14
 8001fe4:	08002335 	.word	0x08002335
 8001fe8:	20000148 	.word	0x20000148
 8001fec:	20000144 	.word	0x20000144
 8001ff0:	20000130 	.word	0x20000130
 8001ff4:	20000128 	.word	0x20000128

08001ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <vTaskSuspendAll+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	4b02      	ldr	r3, [pc, #8]	; (800200c <vTaskSuspendAll+0x14>)
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000014c 	.word	0x2000014c

08002010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <xTaskResumeAll+0xf8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <xTaskResumeAll+0x1a>
 8002026:	b672      	cpsid	i
 8002028:	e7fe      	b.n	8002028 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800202a:	f000 fb47 	bl	80026bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <xTaskResumeAll+0xf8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	4b34      	ldr	r3, [pc, #208]	; (8002108 <xTaskResumeAll+0xf8>)
 8002036:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <xTaskResumeAll+0xf8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d15b      	bne.n	80020f8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <xTaskResumeAll+0xfc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d057      	beq.n	80020f8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002048:	e02f      	b.n	80020aa <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <xTaskResumeAll+0x100>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3318      	adds	r3, #24
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff fe24 	bl	8001ca4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3304      	adds	r3, #4
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff fe1f 	bl	8001ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <xTaskResumeAll+0x104>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d903      	bls.n	800207a <xTaskResumeAll+0x6a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <xTaskResumeAll+0x104>)
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207e:	0013      	movs	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	189b      	adds	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4a24      	ldr	r2, [pc, #144]	; (8002118 <xTaskResumeAll+0x108>)
 8002088:	189a      	adds	r2, r3, r2
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3304      	adds	r3, #4
 800208e:	0019      	movs	r1, r3
 8002090:	0010      	movs	r0, r2
 8002092:	f7ff fdaf 	bl	8001bf4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <xTaskResumeAll+0x10c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <xTaskResumeAll+0x110>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <xTaskResumeAll+0x100>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1cb      	bne.n	800204a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80020b8:	f000 f9dc 	bl	8002474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <xTaskResumeAll+0x114>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00f      	beq.n	80020e8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80020c8:	f000 f82e 	bl	8002128 <xTaskIncrementTick>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d002      	beq.n	80020d6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <xTaskResumeAll+0x110>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3b01      	subs	r3, #1
 80020da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f2      	bne.n	80020c8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <xTaskResumeAll+0x114>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <xTaskResumeAll+0x110>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80020f0:	2301      	movs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80020f4:	f000 fad2 	bl	800269c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020f8:	f000 faf2 	bl	80026e0 <vPortExitCritical>

	return xAlreadyYielded;
 80020fc:	68bb      	ldr	r3, [r7, #8]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	2000014c 	.word	0x2000014c
 800210c:	20000124 	.word	0x20000124
 8002110:	200000e4 	.word	0x200000e4
 8002114:	2000012c 	.word	0x2000012c
 8002118:	20000028 	.word	0x20000028
 800211c:	20000024 	.word	0x20000024
 8002120:	20000138 	.word	0x20000138
 8002124:	20000134 	.word	0x20000134

08002128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002132:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <xTaskIncrementTick+0x13c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d000      	beq.n	800213c <xTaskIncrementTick+0x14>
 800213a:	e083      	b.n	8002244 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800213c:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <xTaskIncrementTick+0x140>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002144:	4b48      	ldr	r3, [pc, #288]	; (8002268 <xTaskIncrementTick+0x140>)
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d117      	bne.n	8002180 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <xTaskIncrementTick+0x144>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <xTaskIncrementTick+0x36>
 800215a:	b672      	cpsid	i
 800215c:	e7fe      	b.n	800215c <xTaskIncrementTick+0x34>
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <xTaskIncrementTick+0x144>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <xTaskIncrementTick+0x148>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <xTaskIncrementTick+0x144>)
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4b40      	ldr	r3, [pc, #256]	; (8002270 <xTaskIncrementTick+0x148>)
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	4b40      	ldr	r3, [pc, #256]	; (8002274 <xTaskIncrementTick+0x14c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <xTaskIncrementTick+0x14c>)
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f000 f97a 	bl	8002474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002180:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <xTaskIncrementTick+0x150>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d34e      	bcc.n	8002228 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <xTaskIncrementTick+0x144>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <xTaskIncrementTick+0x70>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <xTaskIncrementTick+0x72>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <xTaskIncrementTick+0x150>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	4252      	negs	r2, r2
 80021a4:	601a      	str	r2, [r3, #0]
					break;
 80021a6:	e03f      	b.n	8002228 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <xTaskIncrementTick+0x144>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d203      	bcs.n	80021c8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <xTaskIncrementTick+0x150>)
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
						break;
 80021c6:	e02f      	b.n	8002228 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3304      	adds	r3, #4
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff fd69 	bl	8001ca4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3318      	adds	r3, #24
 80021de:	0018      	movs	r0, r3
 80021e0:	f7ff fd60 	bl	8001ca4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <xTaskIncrementTick+0x154>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d903      	bls.n	80021f8 <xTaskIncrementTick+0xd0>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <xTaskIncrementTick+0x154>)
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	0013      	movs	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	189b      	adds	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <xTaskIncrementTick+0x158>)
 8002206:	189a      	adds	r2, r3, r2
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3304      	adds	r3, #4
 800220c:	0019      	movs	r1, r3
 800220e:	0010      	movs	r0, r2
 8002210:	f7ff fcf0 	bl	8001bf4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <xTaskIncrementTick+0x15c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	429a      	cmp	r2, r3
 8002220:	d3b3      	bcc.n	800218a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002222:	2301      	movs	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002226:	e7b0      	b.n	800218a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <xTaskIncrementTick+0x15c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222e:	4914      	ldr	r1, [pc, #80]	; (8002280 <xTaskIncrementTick+0x158>)
 8002230:	0013      	movs	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	189b      	adds	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	585b      	ldr	r3, [r3, r1]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d907      	bls.n	800224e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800223e:	2301      	movs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e004      	b.n	800224e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <xTaskIncrementTick+0x160>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <xTaskIncrementTick+0x160>)
 800224c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <xTaskIncrementTick+0x164>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800225a:	697b      	ldr	r3, [r7, #20]
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000014c 	.word	0x2000014c
 8002268:	20000128 	.word	0x20000128
 800226c:	200000dc 	.word	0x200000dc
 8002270:	200000e0 	.word	0x200000e0
 8002274:	2000013c 	.word	0x2000013c
 8002278:	20000144 	.word	0x20000144
 800227c:	2000012c 	.word	0x2000012c
 8002280:	20000028 	.word	0x20000028
 8002284:	20000024 	.word	0x20000024
 8002288:	20000134 	.word	0x20000134
 800228c:	20000138 	.word	0x20000138

08002290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <vTaskSwitchContext+0x90>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <vTaskSwitchContext+0x94>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80022a4:	e037      	b.n	8002316 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <vTaskSwitchContext+0x94>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <vTaskSwitchContext+0x98>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	e007      	b.n	80022c4 <vTaskSwitchContext+0x34>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <vTaskSwitchContext+0x2e>
 80022ba:	b672      	cpsid	i
 80022bc:	e7fe      	b.n	80022bc <vTaskSwitchContext+0x2c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	4919      	ldr	r1, [pc, #100]	; (800232c <vTaskSwitchContext+0x9c>)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	0013      	movs	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	189b      	adds	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	585b      	ldr	r3, [r3, r1]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ee      	beq.n	80022b4 <vTaskSwitchContext+0x24>
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	0013      	movs	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <vTaskSwitchContext+0x9c>)
 80022e2:	189b      	adds	r3, r3, r2
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	3308      	adds	r3, #8
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d104      	bne.n	8002306 <vTaskSwitchContext+0x76>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <vTaskSwitchContext+0xa0>)
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <vTaskSwitchContext+0x98>)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	2000014c 	.word	0x2000014c
 8002324:	20000138 	.word	0x20000138
 8002328:	2000012c 	.word	0x2000012c
 800232c:	20000028 	.word	0x20000028
 8002330:	20000024 	.word	0x20000024

08002334 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800233c:	f000 f84e 	bl	80023dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <prvIdleTask+0x1c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d9f9      	bls.n	800233c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002348:	f000 f9a8 	bl	800269c <vPortYield>
		prvCheckTasksWaitingTermination();
 800234c:	e7f6      	b.n	800233c <prvIdleTask+0x8>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	20000028 	.word	0x20000028

08002354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	e00c      	b.n	800237a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	0013      	movs	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	189b      	adds	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4a14      	ldr	r2, [pc, #80]	; (80023bc <prvInitialiseTaskLists+0x68>)
 800236c:	189b      	adds	r3, r3, r2
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fc17 	bl	8001ba2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d9ef      	bls.n	8002360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <prvInitialiseTaskLists+0x6c>)
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff fc0d 	bl	8001ba2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <prvInitialiseTaskLists+0x70>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff fc09 	bl	8001ba2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <prvInitialiseTaskLists+0x74>)
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff fc05 	bl	8001ba2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <prvInitialiseTaskLists+0x78>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff fc01 	bl	8001ba2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <prvInitialiseTaskLists+0x7c>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff fbfd 	bl	8001ba2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <prvInitialiseTaskLists+0x80>)
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <prvInitialiseTaskLists+0x6c>)
 80023ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <prvInitialiseTaskLists+0x84>)
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <prvInitialiseTaskLists+0x70>)
 80023b2:	601a      	str	r2, [r3, #0]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000028 	.word	0x20000028
 80023c0:	200000b4 	.word	0x200000b4
 80023c4:	200000c8 	.word	0x200000c8
 80023c8:	200000e4 	.word	0x200000e4
 80023cc:	200000f8 	.word	0x200000f8
 80023d0:	20000110 	.word	0x20000110
 80023d4:	200000dc 	.word	0x200000dc
 80023d8:	200000e0 	.word	0x200000e0

080023dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023e2:	e027      	b.n	8002434 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 80023e4:	f7ff fe08 	bl	8001ff8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <prvCheckTasksWaitingTermination+0x68>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	425a      	negs	r2, r3
 80023ee:	4153      	adcs	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80023f4:	f7ff fe0c 	bl	8002010 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11a      	bne.n	8002434 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80023fe:	f000 f95d 	bl	80026bc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <prvCheckTasksWaitingTermination+0x68>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3304      	adds	r3, #4
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff fc48 	bl	8001ca4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <prvCheckTasksWaitingTermination+0x6c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1e5a      	subs	r2, r3, #1
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <prvCheckTasksWaitingTermination+0x6c>)
 800241c:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <prvCheckTasksWaitingTermination+0x70>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1e5a      	subs	r2, r3, #1
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <prvCheckTasksWaitingTermination+0x70>)
 8002426:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002428:	f000 f95a 	bl	80026e0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f80e 	bl	8002450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <prvCheckTasksWaitingTermination+0x70>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1d3      	bne.n	80023e4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200000f8 	.word	0x200000f8
 8002448:	20000124 	.word	0x20000124
 800244c:	2000010c 	.word	0x2000010c

08002450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	0018      	movs	r0, r3
 800245e:	f000 fa65 	bl	800292c <vPortFree>
			vPortFree( pxTCB );
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fa61 	bl	800292c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <prvResetNextTaskUnblockTime+0x40>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <prvResetNextTaskUnblockTime+0x14>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <prvResetNextTaskUnblockTime+0x16>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <prvResetNextTaskUnblockTime+0x44>)
 8002490:	2201      	movs	r2, #1
 8002492:	4252      	negs	r2, r2
 8002494:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002496:	e008      	b.n	80024aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <prvResetNextTaskUnblockTime+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <prvResetNextTaskUnblockTime+0x44>)
 80024a8:	601a      	str	r2, [r3, #0]
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	200000dc 	.word	0x200000dc
 80024b8:	20000144 	.word	0x20000144

080024bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <xTaskGetSchedulerState+0x30>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024ca:	2301      	movs	r3, #1
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	e008      	b.n	80024e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <xTaskGetSchedulerState+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80024d8:	2302      	movs	r3, #2
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80024e2:	687b      	ldr	r3, [r7, #4]
	}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000130 	.word	0x20000130
 80024f0:	2000014c 	.word	0x2000014c

080024f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <prvAddCurrentTaskToDelayedList+0x90>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <prvAddCurrentTaskToDelayedList+0x94>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3304      	adds	r3, #4
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff fbca 	bl	8001ca4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3301      	adds	r3, #1
 8002514:	d10b      	bne.n	800252e <prvAddCurrentTaskToDelayedList+0x3a>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <prvAddCurrentTaskToDelayedList+0x94>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1d1a      	adds	r2, r3, #4
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <prvAddCurrentTaskToDelayedList+0x98>)
 8002524:	0011      	movs	r1, r2
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff fb64 	bl	8001bf4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800252c:	e026      	b.n	800257c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	18d3      	adds	r3, r2, r3
 8002534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <prvAddCurrentTaskToDelayedList+0x94>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	d209      	bcs.n	800255a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <prvAddCurrentTaskToDelayedList+0x94>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3304      	adds	r3, #4
 8002550:	0019      	movs	r1, r3
 8002552:	0010      	movs	r0, r2
 8002554:	f7ff fb70 	bl	8001c38 <vListInsert>
}
 8002558:	e010      	b.n	800257c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <prvAddCurrentTaskToDelayedList+0x94>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3304      	adds	r3, #4
 8002564:	0019      	movs	r1, r3
 8002566:	0010      	movs	r0, r2
 8002568:	f7ff fb66 	bl	8001c38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d202      	bcs.n	800257c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000128 	.word	0x20000128
 8002588:	20000024 	.word	0x20000024
 800258c:	20000110 	.word	0x20000110
 8002590:	200000e0 	.word	0x200000e0
 8002594:	200000dc 	.word	0x200000dc
 8002598:	20000144 	.word	0x20000144

0800259c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b04      	subs	r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	0452      	lsls	r2, r2, #17
 80025b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b04      	subs	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3b04      	subs	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025c8:	4a08      	ldr	r2, [pc, #32]	; (80025ec <pxPortInitialiseStack+0x50>)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b14      	subs	r3, #20
 80025d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3b20      	subs	r3, #32
 80025de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	080025f1 	.word	0x080025f1

080025f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <prvTaskExitError+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	d001      	beq.n	8002600 <prvTaskExitError+0x10>
 80025fc:	b672      	cpsid	i
 80025fe:	e7fe      	b.n	80025fe <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8002600:	b672      	cpsid	i
	for( ;; );
 8002602:	e7fe      	b.n	8002602 <prvTaskExitError+0x12>
 8002604:	20000000 	.word	0x20000000

08002608 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002620 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <pxCurrentTCBConst2>)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	3020      	adds	r0, #32
 8002628:	f380 8809 	msr	PSP, r0
 800262c:	2002      	movs	r0, #2
 800262e:	f380 8814 	msr	CONTROL, r0
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002638:	46ae      	mov	lr, r5
 800263a:	bc08      	pop	{r3}
 800263c:	bc04      	pop	{r2}
 800263e:	b662      	cpsie	i
 8002640:	4718      	bx	r3
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46c0      	nop			; (mov r8, r8)

08002650 <pxCurrentTCBConst2>:
 8002650:	20000024 	.word	0x20000024
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46c0      	nop			; (mov r8, r8)

08002658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <xPortStartScheduler+0x3c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <xPortStartScheduler+0x3c>)
 8002662:	21ff      	movs	r1, #255	; 0xff
 8002664:	0409      	lsls	r1, r1, #16
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <xPortStartScheduler+0x3c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <xPortStartScheduler+0x3c>)
 8002670:	21ff      	movs	r1, #255	; 0xff
 8002672:	0609      	lsls	r1, r1, #24
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002678:	f000 f898 	bl	80027ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <xPortStartScheduler+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002682:	f7ff ffcd 	bl	8002620 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002686:	f7ff ffb3 	bl	80025f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	e000ed20 	.word	0xe000ed20
 8002698:	20000000 	.word	0x20000000

0800269c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <vPortYield+0x1c>)
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	0552      	lsls	r2, r2, #21
 80026a6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80026a8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80026ac:	f3bf 8f6f 	isb	sy
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80026c0:	b672      	cpsid	i
    uxCriticalNesting++;
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <vPortEnterCritical+0x20>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <vPortEnterCritical+0x20>)
 80026ca:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80026cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80026d0:	f3bf 8f6f 	isb	sy
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	20000000 	.word	0x20000000

080026e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <vPortExitCritical+0x2c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <vPortExitCritical+0x10>
 80026ec:	b672      	cpsid	i
 80026ee:	e7fe      	b.n	80026ee <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <vPortExitCritical+0x2c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <vPortExitCritical+0x2c>)
 80026f8:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <vPortExitCritical+0x2c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d100      	bne.n	8002704 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002702:	b662      	cpsie	i
    }
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	20000000 	.word	0x20000000

08002710 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002710:	f3ef 8010 	mrs	r0, PRIMASK
 8002714:	b672      	cpsid	i
 8002716:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3

0800271c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 800271c:	f380 8810 	msr	PRIMASK, r0
 8002720:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8002722:	46c0      	nop			; (mov r8, r8)
	...

08002730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002730:	f3ef 8009 	mrs	r0, PSP
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <pxCurrentTCBConst>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	3820      	subs	r0, #32
 800273a:	6010      	str	r0, [r2, #0]
 800273c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800273e:	4644      	mov	r4, r8
 8002740:	464d      	mov	r5, r9
 8002742:	4656      	mov	r6, sl
 8002744:	465f      	mov	r7, fp
 8002746:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002748:	b508      	push	{r3, lr}
 800274a:	b672      	cpsid	i
 800274c:	f7ff fda0 	bl	8002290 <vTaskSwitchContext>
 8002750:	b662      	cpsie	i
 8002752:	bc0c      	pop	{r2, r3}
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	6808      	ldr	r0, [r1, #0]
 8002758:	3010      	adds	r0, #16
 800275a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800275c:	46a0      	mov	r8, r4
 800275e:	46a9      	mov	r9, r5
 8002760:	46b2      	mov	sl, r6
 8002762:	46bb      	mov	fp, r7
 8002764:	f380 8809 	msr	PSP, r0
 8002768:	3820      	subs	r0, #32
 800276a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800276c:	4718      	bx	r3
 800276e:	46c0      	nop			; (mov r8, r8)

08002770 <pxCurrentTCBConst>:
 8002770:	20000024 	.word	0x20000024
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46c0      	nop			; (mov r8, r8)

08002778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800277e:	f7ff ffc7 	bl	8002710 <ulSetInterruptMaskFromISR>
 8002782:	0003      	movs	r3, r0
 8002784:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002786:	f7ff fccf 	bl	8002128 <xTaskIncrementTick>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d003      	beq.n	8002796 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <xPortSysTickHandler+0x30>)
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0552      	lsls	r2, r2, #21
 8002794:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff ffbf 	bl	800271c <vClearInterruptMaskFromISR>
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	e000ed04 	.word	0xe000ed04

080027ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <vPortSetupTimerInterrupt+0x28>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	23fa      	movs	r3, #250	; 0xfa
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	0010      	movs	r0, r2
 80027ba:	f7fd fca5 	bl	8000108 <__udivsi3>
 80027be:	0003      	movs	r3, r0
 80027c0:	001a      	movs	r2, r3
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <vPortSetupTimerInterrupt+0x2c>)
 80027c4:	3a01      	subs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <vPortSetupTimerInterrupt+0x30>)
 80027ca:	2207      	movs	r2, #7
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000004 	.word	0x20000004
 80027d8:	e000e014 	.word	0xe000e014
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80027ec:	f7ff fc04 	bl	8001ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <pvPortMalloc+0x138>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027f8:	f000 f8e0 	bl	80029bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <pvPortMalloc+0x13c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4013      	ands	r3, r2
 8002804:	d000      	beq.n	8002808 <pvPortMalloc+0x28>
 8002806:	e079      	b.n	80028fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d012      	beq.n	8002834 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800280e:	2208      	movs	r2, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	189b      	adds	r3, r3, r2
 8002814:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	d00a      	beq.n	8002834 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2207      	movs	r2, #7
 8002822:	4393      	bics	r3, r2
 8002824:	3308      	adds	r3, #8
 8002826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2207      	movs	r2, #7
 800282c:	4013      	ands	r3, r2
 800282e:	d001      	beq.n	8002834 <pvPortMalloc+0x54>
 8002830:	b672      	cpsid	i
 8002832:	e7fe      	b.n	8002832 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d060      	beq.n	80028fc <pvPortMalloc+0x11c>
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <pvPortMalloc+0x140>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d85b      	bhi.n	80028fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <pvPortMalloc+0x144>)
 8002846:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <pvPortMalloc+0x144>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800284e:	e004      	b.n	800285a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d903      	bls.n	800286c <pvPortMalloc+0x8c>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f1      	bne.n	8002850 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <pvPortMalloc+0x138>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	d042      	beq.n	80028fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2208      	movs	r2, #8
 800287c:	189b      	adds	r3, r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	2308      	movs	r3, #8
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	429a      	cmp	r2, r3
 8002896:	d916      	bls.n	80028c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	18d3      	adds	r3, r2, r3
 800289e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	d001      	beq.n	80028ac <pvPortMalloc+0xcc>
 80028a8:	b672      	cpsid	i
 80028aa:	e7fe      	b.n	80028aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad2      	subs	r2, r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 f8db 	bl	8002a7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <pvPortMalloc+0x140>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <pvPortMalloc+0x140>)
 80028d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <pvPortMalloc+0x140>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <pvPortMalloc+0x148>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d203      	bcs.n	80028e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <pvPortMalloc+0x140>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <pvPortMalloc+0x148>)
 80028e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <pvPortMalloc+0x13c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80028fc:	f7ff fb88 	bl	8002010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2207      	movs	r2, #7
 8002904:	4013      	ands	r3, r2
 8002906:	d001      	beq.n	800290c <pvPortMalloc+0x12c>
 8002908:	b672      	cpsid	i
 800290a:	e7fe      	b.n	800290a <pvPortMalloc+0x12a>
	return pvReturn;
 800290c:	68fb      	ldr	r3, [r7, #12]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b006      	add	sp, #24
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	20000d58 	.word	0x20000d58
 800291c:	20000d64 	.word	0x20000d64
 8002920:	20000d5c 	.word	0x20000d5c
 8002924:	20000d50 	.word	0x20000d50
 8002928:	20000d60 	.word	0x20000d60

0800292c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d035      	beq.n	80029aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800293e:	2308      	movs	r3, #8
 8002940:	425b      	negs	r3, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	18d3      	adds	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <vPortFree+0x88>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4013      	ands	r3, r2
 8002956:	d101      	bne.n	800295c <vPortFree+0x30>
 8002958:	b672      	cpsid	i
 800295a:	e7fe      	b.n	800295a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <vPortFree+0x3c>
 8002964:	b672      	cpsid	i
 8002966:	e7fe      	b.n	8002966 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <vPortFree+0x88>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4013      	ands	r3, r2
 8002972:	d01a      	beq.n	80029aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <vPortFree+0x88>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800298c:	f7ff fb34 	bl	8001ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <vPortFree+0x8c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	18d2      	adds	r2, r2, r3
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <vPortFree+0x8c>)
 800299c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f86b 	bl	8002a7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80029a6:	f7ff fb33 	bl	8002010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	20000d64 	.word	0x20000d64
 80029b8:	20000d5c 	.word	0x20000d5c

080029bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029c2:	23c0      	movs	r3, #192	; 0xc0
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <prvHeapInit+0xa8>)
 80029ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2207      	movs	r2, #7
 80029d0:	4013      	ands	r3, r2
 80029d2:	d00c      	beq.n	80029ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3307      	adds	r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2207      	movs	r2, #7
 80029de:	4393      	bics	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <prvHeapInit+0xa8>)
 80029ea:	18d3      	adds	r3, r2, r3
 80029ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <prvHeapInit+0xac>)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <prvHeapInit+0xac>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	18d3      	adds	r3, r2, r3
 8002a04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a06:	2208      	movs	r2, #8
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2207      	movs	r2, #7
 8002a12:	4393      	bics	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <prvHeapInit+0xb0>)
 8002a1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <prvHeapInit+0xb0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <prvHeapInit+0xb0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	1ad2      	subs	r2, r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <prvHeapInit+0xb0>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <prvHeapInit+0xb4>)
 8002a48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <prvHeapInit+0xb8>)
 8002a50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <prvHeapInit+0xbc>)
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0612      	lsls	r2, r2, #24
 8002a58:	601a      	str	r2, [r3, #0]
}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	20000150 	.word	0x20000150
 8002a68:	20000d50 	.word	0x20000d50
 8002a6c:	20000d58 	.word	0x20000d58
 8002a70:	20000d60 	.word	0x20000d60
 8002a74:	20000d5c 	.word	0x20000d5c
 8002a78:	20000d64 	.word	0x20000d64

08002a7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <prvInsertBlockIntoFreeList+0xa8>)
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e002      	b.n	8002a90 <prvInsertBlockIntoFreeList+0x14>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d8f7      	bhi.n	8002a8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	18d3      	adds	r3, r2, r3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d108      	bne.n	8002abe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	18d2      	adds	r2, r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	18d2      	adds	r2, r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d118      	bne.n	8002b04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <prvInsertBlockIntoFreeList+0xac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d00d      	beq.n	8002afa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	18d2      	adds	r2, r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e008      	b.n	8002b0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <prvInsertBlockIntoFreeList+0xac>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e003      	b.n	8002b0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d002      	beq.n	8002b1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	20000d50 	.word	0x20000d50
 8002b28:	20000d58 	.word	0x20000d58

08002b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b32:	f7fd fcb5 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b36:	f7fd fb73 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b3a:	f7fd fc71 	bl	8000420 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002b3e:	f7fd fbd1 	bl	80002e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b42:	f7fd fc0d 	bl	8000360 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8002b46:	f7fd fc3b 	bl	80003c0 <MX_USART4_UART_Init>

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <main+0x40>)
 8002b4e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b50:	c313      	stmia	r3!, {r0, r1, r4}
 8002b52:	ca03      	ldmia	r2!, {r0, r1}
 8002b54:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2100      	movs	r1, #0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7fe ffe5 	bl	8001b2a <osThreadCreate>
 8002b60:	0002      	movs	r2, r0
 8002b62:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <main+0x44>)
 8002b64:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8002b66:	f7fe ffd8 	bl	8001b1a <osKernelStart>
  

  while (1)
 8002b6a:	e7fe      	b.n	8002b6a <main+0x3e>
 8002b6c:	08002f28 	.word	0x08002f28
 8002b70:	20000eac 	.word	0x20000eac

08002b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_MspInit+0x50>)
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_MspInit+0x50>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	619a      	str	r2, [r3, #24]
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_MspInit+0x50>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_MspInit+0x50>)
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_MspInit+0x50>)
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	0549      	lsls	r1, r1, #21
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_MspInit+0x50>)
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	055b      	lsls	r3, r3, #21
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002bba:	2302      	movs	r3, #2
 8002bbc:	425b      	negs	r3, r3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd fd44 	bl	8000650 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	2314      	movs	r3, #20
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	0018      	movs	r0, r3
 8002be2:	2314      	movs	r3, #20
 8002be4:	001a      	movs	r2, r3
 8002be6:	2100      	movs	r1, #0
 8002be8:	f000 f970 	bl	8002ecc <memset>
  if(hspi->Instance==SPI1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_SPI_MspInit+0x90>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d132      	bne.n	8002c5c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	0149      	lsls	r1, r1, #5
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	015b      	lsls	r3, r3, #5
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	0289      	lsls	r1, r1, #10
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	615a      	str	r2, [r3, #20]
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_SPI_MspInit+0x94>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	029b      	lsls	r3, r3, #10
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c2e:	2114      	movs	r1, #20
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	22e0      	movs	r2, #224	; 0xe0
 8002c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2202      	movs	r2, #2
 8002c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2203      	movs	r2, #3
 8002c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	187a      	adds	r2, r7, r1
 8002c50:	2390      	movs	r3, #144	; 0x90
 8002c52:	05db      	lsls	r3, r3, #23
 8002c54:	0011      	movs	r1, r2
 8002c56:	0018      	movs	r0, r3
 8002c58:	f7fd fd1c 	bl	8000694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b00a      	add	sp, #40	; 0x28
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013000 	.word	0x40013000
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	231c      	movs	r3, #28
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	0018      	movs	r0, r3
 8002c7a:	2314      	movs	r3, #20
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f000 f924 	bl	8002ecc <memset>
  if(huart->Instance==USART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a39      	ldr	r2, [pc, #228]	; (8002d70 <HAL_UART_MspInit+0x104>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d134      	bne.n	8002cf8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	01c9      	lsls	r1, r1, #7
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	619a      	str	r2, [r3, #24]
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	01db      	lsls	r3, r3, #7
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0289      	lsls	r1, r1, #10
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	615a      	str	r2, [r3, #20]
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cc6:	211c      	movs	r1, #28
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	22c0      	movs	r2, #192	; 0xc0
 8002ccc:	00d2      	lsls	r2, r2, #3
 8002cce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce8:	187a      	adds	r2, r7, r1
 8002cea:	2390      	movs	r3, #144	; 0x90
 8002cec:	05db      	lsls	r3, r3, #23
 8002cee:	0011      	movs	r1, r2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fccf 	bl	8000694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8002cf6:	e037      	b.n	8002d68 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART4)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <HAL_UART_MspInit+0x10c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d132      	bne.n	8002d68 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART4_CLK_ENABLE();
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0309      	lsls	r1, r1, #12
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	031b      	lsls	r3, r3, #12
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0289      	lsls	r1, r1, #10
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	615a      	str	r2, [r3, #20]
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_UART_MspInit+0x108>)
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d3a:	211c      	movs	r1, #28
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2202      	movs	r2, #2
 8002d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	2203      	movs	r2, #3
 8002d52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	2204      	movs	r2, #4
 8002d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	187a      	adds	r2, r7, r1
 8002d5c:	2390      	movs	r3, #144	; 0x90
 8002d5e:	05db      	lsls	r3, r3, #23
 8002d60:	0011      	movs	r1, r2
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd fc96 	bl	8000694 <HAL_GPIO_Init>
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b00c      	add	sp, #48	; 0x30
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40004c00 	.word	0x40004c00

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <HardFault_Handler+0x4>

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d90:	f7fd fbb6 	bl	8000500 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d94:	f7ff fb92 	bl	80024bc <xTaskGetSchedulerState>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d9e:	f7ff fceb 	bl	8002778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <SystemInit+0x70>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <SystemInit+0x70>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <SystemInit+0x70>)
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <SystemInit+0x70>)
 8002dbe:	4917      	ldr	r1, [pc, #92]	; (8002e1c <SystemInit+0x74>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <SystemInit+0x70>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <SystemInit+0x70>)
 8002dca:	4915      	ldr	r1, [pc, #84]	; (8002e20 <SystemInit+0x78>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <SystemInit+0x70>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <SystemInit+0x70>)
 8002dd6:	4913      	ldr	r1, [pc, #76]	; (8002e24 <SystemInit+0x7c>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <SystemInit+0x70>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <SystemInit+0x70>)
 8002de2:	4911      	ldr	r1, [pc, #68]	; (8002e28 <SystemInit+0x80>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <SystemInit+0x70>)
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <SystemInit+0x70>)
 8002dee:	210f      	movs	r1, #15
 8002df0:	438a      	bics	r2, r1
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <SystemInit+0x70>)
 8002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df8:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <SystemInit+0x70>)
 8002dfa:	490c      	ldr	r1, [pc, #48]	; (8002e2c <SystemInit+0x84>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SystemInit+0x70>)
 8002e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SystemInit+0x70>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	438a      	bics	r2, r1
 8002e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <SystemInit+0x70>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]

}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08ffb80c 	.word	0x08ffb80c
 8002e20:	fef6ffff 	.word	0xfef6ffff
 8002e24:	fffbffff 	.word	0xfffbffff
 8002e28:	ffc0ffff 	.word	0xffc0ffff
 8002e2c:	fffffeec 	.word	0xfffffeec

08002e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e30:	480d      	ldr	r0, [pc, #52]	; (8002e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e36:	490e      	ldr	r1, [pc, #56]	; (8002e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <LoopForever+0xe>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e4c:	4c0b      	ldr	r4, [pc, #44]	; (8002e7c <LoopForever+0x16>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e5a:	f7ff ffa5 	bl	8002da8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e5e:	f000 f811 	bl	8002e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e62:	f7ff fe63 	bl	8002b2c <main>

08002e66 <LoopForever>:

LoopForever:
    b LoopForever
 8002e66:	e7fe      	b.n	8002e66 <LoopForever>
  ldr   r0, =_estack
 8002e68:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e70:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002e74:	08002f5c 	.word	0x08002f5c
  ldr r2, =_sbss
 8002e78:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002e7c:	20000eb4 	.word	0x20000eb4

08002e80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC1_IRQHandler>
	...

08002e84 <__libc_init_array>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	2600      	movs	r6, #0
 8002e88:	4d0c      	ldr	r5, [pc, #48]	; (8002ebc <__libc_init_array+0x38>)
 8002e8a:	4c0d      	ldr	r4, [pc, #52]	; (8002ec0 <__libc_init_array+0x3c>)
 8002e8c:	1b64      	subs	r4, r4, r5
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	42a6      	cmp	r6, r4
 8002e92:	d109      	bne.n	8002ea8 <__libc_init_array+0x24>
 8002e94:	2600      	movs	r6, #0
 8002e96:	f000 f821 	bl	8002edc <_init>
 8002e9a:	4d0a      	ldr	r5, [pc, #40]	; (8002ec4 <__libc_init_array+0x40>)
 8002e9c:	4c0a      	ldr	r4, [pc, #40]	; (8002ec8 <__libc_init_array+0x44>)
 8002e9e:	1b64      	subs	r4, r4, r5
 8002ea0:	10a4      	asrs	r4, r4, #2
 8002ea2:	42a6      	cmp	r6, r4
 8002ea4:	d105      	bne.n	8002eb2 <__libc_init_array+0x2e>
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
 8002ea8:	00b3      	lsls	r3, r6, #2
 8002eaa:	58eb      	ldr	r3, [r5, r3]
 8002eac:	4798      	blx	r3
 8002eae:	3601      	adds	r6, #1
 8002eb0:	e7ee      	b.n	8002e90 <__libc_init_array+0xc>
 8002eb2:	00b3      	lsls	r3, r6, #2
 8002eb4:	58eb      	ldr	r3, [r5, r3]
 8002eb6:	4798      	blx	r3
 8002eb8:	3601      	adds	r6, #1
 8002eba:	e7f2      	b.n	8002ea2 <__libc_init_array+0x1e>
 8002ebc:	08002f54 	.word	0x08002f54
 8002ec0:	08002f54 	.word	0x08002f54
 8002ec4:	08002f54 	.word	0x08002f54
 8002ec8:	08002f58 	.word	0x08002f58

08002ecc <memset>:
 8002ecc:	0003      	movs	r3, r0
 8002ece:	1812      	adds	r2, r2, r0
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d100      	bne.n	8002ed6 <memset+0xa>
 8002ed4:	4770      	bx	lr
 8002ed6:	7019      	strb	r1, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	e7f9      	b.n	8002ed0 <memset+0x4>

08002edc <_init>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr

08002ee8 <_fini>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr
